<!DOCTYPE html>
<html>
<!-- Date: 08 Oct 2016 THINK SIMPLE-->
<head>
	<title>H590 Project2</title>
	<!-- Below tag lines to have responsive page based on bootstrap -->
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
	
	<!-- D3 related javascripts -->
	<script src="scripts/d3.min.js" charset="utf-8"></script>
	<script src="scripts/d3.tip.js" charset="utf-8"></script>
	<script src="scripts/topojson.v1.js" charset="utf-8"></script>
	<script src="http://d3js.org/queue.v1.min.js"></script>
	
	<!-- styling related sources -->
	<link rel="stylesheet" type="text/css" href="css/bootstrap.css">
	
	<style>
		.q0-9 { fill:#f7fcfd; }
		.q1-9 { fill:#e5f5f9; }
		.q2-9 { fill:#ccece6; }
		.q3-9 { fill:#99d8c9; }
		.q4-9 { fill:#66c2a4; }
		.q5-9 { fill:#41ae76; }
		.q6-9 { fill:#238b45; }
		.q7-9 { fill:#006d2c; }
		.q8-9 { fill:#00441b; }
		
		.counties {
			  stroke: #fff;
		}
			
		.states {
			  stroke: #fff;
			  stroke-linejoin: round;
		}
	</style>
</head>

<body>

<script>

var width = 960,
	height = 900;
	
var svg = d3.select("body").append("svg")
			.attr("width", width)
			.attr("height", height);
	
//determine what type of map projection
var projection = d3.geoAlbersUsa()
    .scale(1280)
    .translate([width / 2, height / 2]);
	
//attach the projection to the map	
//project the specified point from the sphere to the plane  - 2D from 3D
var path = d3.geoPath()
			.projection(projection);

var q = d3.queue()
	.defer(d3.json, "data/us-10m.json")
    .defer(d3.json, "http://api.census.gov/data/2015/acs1?get=NAME,B01003_001E&for=state:*&key=7adf8bfea67e27e5edcaa228acef5db5cb905303")
    .defer(d3.json, "http://api.census.gov/data/2015/acs1?get=NAME,B01003_001E&for=county:*&key=7adf8bfea67e27e5edcaa228acef5db5cb905303")
    .awaitAll(function(error, results) {
		if (error) throw error;
		//print the response of first request - states | second - counties
		
		console.log(results[0]);
  
		var val = [];
		var valByCounty = d3.map();
		
		for(i = 1; i < results[2].length; i++)
		{
			//make sure to start from 0 index for val else trouble at min and max and later
			val[i-1] = parseInt(results[2][i][1]);
			//make the key field using "state"+"county" value
			valByCounty.set();
		}

		var features = topojson.feature(results[0], results[0].objects.counties).features;
		
		for(j = 0; j < features.length; j++)
		{
			//make the key field using "state"+"county" value
			valByCounty.set(features[j].id, );
		}
		
		console.log(topojson.feature(results[0], results[0].objects.counties).features.length);
		console.log(results[0].objects.counties);
		
		min = d3.min(val);	
		max = d3.max(val);
	
		console.log("min : "+min);
		console.log("max : "+max);
		
		var quantize = d3.scaleQuantize()
			.domain([min, max])
			.range(["#fff5f0", "#fee0d2", "#fcbba1", "#fc9272", "#fb6a4a",
                "#ef3b2c", "#cb181d", "#a50f15", "#67000d"]);
				
			//modify states to counties to get for counties below
			var paths = svg.append("g")
				.attr("class", "counties")
				.selectAll("path")
				.data(topojson.feature(results[0], results[0].objects.counties).features)
				.enter().append("path")
				.attr("d", path);
				
			d3.select("g").select("path").data(val)
				.attr("fill", function(d, i){ return quantize(i + 1);});
    });
		
</script>

</body>
</html>